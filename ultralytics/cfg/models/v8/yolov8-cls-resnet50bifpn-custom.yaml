# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8-cls image classification model with ResNet50 backbone
# Model docs: https://docs.ultralytics.com/models/yolov8
# Task docs: https://docs.ultralytics.com/tasks/classify

# Parameters
nc: 10 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 1024]
  l: [1.00, 1.00, 1024]
  x: [1.00, 1.25, 1024]

# YOLOv8.0n backbone
backbone:
  - [-1, 1, Conv, [64, 3, 2]]                # Initial convolution layer
  - [-1, 3, ResNetLayer, [64, 64, 1, False, 3]]   # Stage 1: ResNetLayer with input=64, output=64
  - [-1, 4, ResNetLayer, [64, 128, 2, False, 4]]   # Stage 2: ResNetLayer with input=64, output=128
  - [-1, 6, ResNetLayer, [128, 256, 2, False, 6]]   # Stage 3: ResNetLayer with input=128, output=256
  - [-1, 3, ResNetLayer, [256, 512, 2, False, 3]]   # Stage 4: ResNetLayer with input=256, output=512
  # Neck
neck:
  # BiFPN layers for multi-scale feature fusion
  - [-1, 2, BiFPNLayer, [256, 128, 256]]    # First BiFPN stage with input=256
  - [-1, 2, BiFPNLayer, [512, 256, 512]]    # Second BiFPN stage with input=512

# YOLOv8.0n head
head:
  #- [-1, 1, Classify, [nc]] # Classify
  # YOLOv8 detection head layers
  - [[-1], nc * (5 + nc), DetectHead]             # DetectHead for final outputs
